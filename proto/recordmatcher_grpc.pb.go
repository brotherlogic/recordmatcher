// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package recordmatcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RecordMatcherServiceClient is the client API for RecordMatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordMatcherServiceClient interface {
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
}

type recordMatcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordMatcherServiceClient(cc grpc.ClientConnInterface) RecordMatcherServiceClient {
	return &recordMatcherServiceClient{cc}
}

func (c *recordMatcherServiceClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/recordmatcher.RecordMatcherService/Match", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordMatcherServiceServer is the server API for RecordMatcherService service.
// All implementations should embed UnimplementedRecordMatcherServiceServer
// for forward compatibility
type RecordMatcherServiceServer interface {
	Match(context.Context, *MatchRequest) (*MatchResponse, error)
}

// UnimplementedRecordMatcherServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRecordMatcherServiceServer struct {
}

func (UnimplementedRecordMatcherServiceServer) Match(context.Context, *MatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Match not implemented")
}

// UnsafeRecordMatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordMatcherServiceServer will
// result in compilation errors.
type UnsafeRecordMatcherServiceServer interface {
	mustEmbedUnimplementedRecordMatcherServiceServer()
}

func RegisterRecordMatcherServiceServer(s grpc.ServiceRegistrar, srv RecordMatcherServiceServer) {
	s.RegisterService(&_RecordMatcherService_serviceDesc, srv)
}

func _RecordMatcherService_Match_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordMatcherServiceServer).Match(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordmatcher.RecordMatcherService/Match",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordMatcherServiceServer).Match(ctx, req.(*MatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordMatcherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordmatcher.RecordMatcherService",
	HandlerType: (*RecordMatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Match",
			Handler:    _RecordMatcherService_Match_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordmatcher.proto",
}
